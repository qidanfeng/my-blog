<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微服务架构升级切换MSE</title>
    <link href="/my-blog/2025/08/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7%E5%88%87%E6%8D%A2MSE/"/>
    <url>/my-blog/2025/08/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7%E5%88%87%E6%8D%A2MSE/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>目前公司的微服务架构使用的注册中心和配置中心是开源版本的Nacos 2.0版本，采用集群部署，三个节点。</p><p>长时间使用和观察发现，这三个节点的CPU使用率400%多，但是服务又正常运行。</p><p>总之本地搭建的服务节点，运维成本高，风险高，故决定升级为阿里云的MSE的商业产品。</p><h1 id="主要的工作内容"><a href="#主要的工作内容" class="headerlink" title="主要的工作内容"></a>主要的工作内容</h1><h2 id="一、核心组件升级"><a href="#一、核心组件升级" class="headerlink" title="一、核心组件升级"></a>一、核心组件升级</h2><h3 id="spring主版本升级"><a href="#spring主版本升级" class="headerlink" title="spring主版本升级"></a>spring主版本升级</h3><ul><li>将整个微服务的父依赖：<code>spring-boot-starter-parent</code>版本由<code>2.0.3.RELEASE</code>升级到<code>2.5.4</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>spring-cloud-dependencies版本升级，由<code>Finchley.SR2</code>升级到：<code>2020.0.3</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="RPC框架升级"><a href="#RPC框架升级" class="headerlink" title="RPC框架升级"></a>RPC框架升级</h3></li><li>Dubbo从2.2版本升级至2.7.20版本  <ul><li>测试阶段发现2.7.15存在dubbo调用稳定性问题（表现为Consumer频繁掉线、偶发Provider寻址失败）  </li><li>经阿里云技术支持确认，升级至2.7.20版本后问题解决</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-registry-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="Nacos客户端升级"><a href="#Nacos客户端升级" class="headerlink" title="Nacos客户端升级"></a>Nacos客户端升级</h3><ul><li>更换<code>spring-cloud-starter-alibaba-nacos-config</code>依赖<ul><li>由原来的<code>org.springframework.cloud</code>包更换为：<code>com.alibaba.cloud</code></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>更换<code>spring-cloud-starter-alibaba-nacos-discovery</code>依赖<ul><li>由原来的<code>org.springframework.cloud</code>包更换为：<code>com.alibaba.cloud</code></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>单独引入nacos-client依赖包<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.nacos<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nacos-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、公共模块重构"><a href="#二、公共模块重构" class="headerlink" title="二、公共模块重构"></a>二、公共模块重构</h2></li></ul><h3 id="模块体系优化"><a href="#模块体系优化" class="headerlink" title="模块体系优化"></a>模块体系优化</h3><ul><li><p>废除原有<code>gfs-common</code>项目</p><ul><li>新建<code>gfs-boot-starter-common</code>作为基础公共模块  </li><li>将原<code>gfs-common</code>功能迁移至新模块</li><li>统一工具类配置文件，工具类依赖版本</li></ul></li><li><p>标准化Starter体系  </p><ul><li>新增<code>gfs-boot-starter-nacos</code>：统一Nacos客户端版本管理</li><li>新增<code>gfs-boot-starter-log</code>：标准化logback日志配置  </li><li>新增<code>gfs-boot-starter-mysql</code>：统一MySQL驱动及连接配置</li></ul></li></ul><p>最终starter项目结构</p><p><img src="img.png"></p><ul><li>各微服务POM文件统一由父项目管理版本</li><li>引入标准化Starter组件（nacos/log/mysql等）替代原有分散依赖</li></ul><h2 id="三、代码标准化"><a href="#三、代码标准化" class="headerlink" title="三、代码标准化"></a>三、代码标准化</h2><h3 id="工具类替换"><a href="#工具类替换" class="headerlink" title="工具类替换"></a>工具类替换</h3><ul><li>统一更换StringUtils包，为gfs-boot-stater-common的工具类</li><li>统一更换CollectionUtils包，为gfs-boot-stater-common的工具类</li></ul><h3 id="dubbo注解更换"><a href="#dubbo注解更换" class="headerlink" title="dubbo注解更换"></a>dubbo注解更换</h3><ul><li>低版本的@Service注解更换为高版本的@DubboService</li><li>低版本的@Reference更换为@DubboReference</li></ul><h2 id="四、切换MSE"><a href="#四、切换MSE" class="headerlink" title="四、切换MSE"></a>四、切换MSE</h2><p>首先整个微服务部署基于阿里云容器ACK部署，在线升级需要保证业务正常操作，要做到无感切换。以下是整个的切换步骤：</p><ul><li>首先购买阿里云MSE，建立命名空间gfs-uat，迁移旧nacos的配置文件<ul><li>对配置文件进行重新优化，建立common-config.yaml文件，将dubbo相关的配置，进行抽离，保证整个微服配置完全一致<br><code>dubbo: application:   id: $&#123;spring.application.name&#125;-$&#123;nacos.namespace&#125;   name: $&#123;spring.application.name&#125;-$&#123;nacos.namespace&#125;   qosEnable: false consumer:   check: false   group: DUBBO   filter: dubboConsumerLogFilter   timeout: 120000 provider:   group: DUBBO   filter: dubboProducerLogFilter   timeout: 120000 registry:   address: nacos://$&#123;nacos.url&#125;:8848   id: $&#123;spring.application.name&#125;   group: DUBBO   port: 8848   useAsConfigCenter: false   useAsMetadataCenter: false   parameters[namespace]: $&#123;nacos.namespace&#125;</code></li></ul></li><li>ACK容器建立新的命名空间：gfs-uat</li><li>通过jenkins的pipeline重新发布新的POD，到gfs-uat命名空间下</li><li>配置新的gateway的容器service</li><li>更改nginx的up-stream 配置，将流量切到两个ack环境下：gfs-uat、gfs-prod</li><li>最后观察gfs-uat环境下的各个服务是否正常，正常后，再切流量完全到gfs-uat下，断掉旧版本的服务</li><li>最后重新发布gfs-prod下面的所有POD，完成切换</li></ul><h2 id="五、升级价值"><a href="#五、升级价值" class="headerlink" title="五、升级价值"></a>五、升级价值</h2><ol><li>实现商业化组件托管，提升注册中心稳定性</li><li>构建标准化技术栈，降低版本冲突风险</li><li>通过Starter体系实现配置/依赖的集中管控</li><li>提升开发效率，使开发人员更专注与业务代码，降低维护成本</li></ol>]]></content>
    
    
    <categories>
      
      <category>架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作成果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AMS初版设计流程</title>
    <link href="/my-blog/2023/10/24/AMS%E5%88%9D%E7%89%88%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/"/>
    <url>/my-blog/2023/10/24/AMS%E5%88%9D%E7%89%88%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AMS 全称 Appointment Management System（预约管理系统），主要责任是解决仓储物流中的资源利用、排队等待、物流准时性和客户满意度等仓储问题。</p><p>仓储作业通过提前进行预约，规范货主送货和承运商提货的作业时间，能够使仓储资源最大化，合理的调度和排班，最大化的提高仓储作业的效率。</p><p>同时通过提前预约可以进行预先安排和调度，根据预约时间窗口来分散到仓库的货物和车辆流量，减少排队和等待时间，提高物流效率。</p><h2 id="平台背景"><a href="#平台背景" class="headerlink" title="平台背景"></a>平台背景</h2><p>目前本公司所有的仓储系统有：WMS、OMS、TMS，再加上本次要讲解的AMS系统，统称为：O-A-T-W。各系统的功能和作用这里不再阐述，相信大家已经很是了解</p><p>本次主要目的是要讲述 AMS系统的基本功能。</p><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>第一版的AMS设计很简单，能满足基本业务场景即可，后面再根据用户需求和实际场景再进行迭代升级。</p><p>AMS系统涉及到微信小程序端和浏览器WEB端两个操作途径：</p><p><strong>微信小程序</strong>主要为外部用户使用，指本公司以为的人员使用，比如客户、供应商或者司机，他们通过微信小程序进行送货预约或者到货预约，提交预约信息后，数据传入WEB端经由仓库中控审核和调度。微信小程序提供的主要功能有：</p><ol><li><p>首页展示</p></li><li><p>入库有单预约</p></li><li><p>入库无单预约</p></li><li><p>出库有单预约</p></li><li><p>出库无单预约</p></li><li><p>历史预约</p></li><li><p>我的司机</p></li><li><p>我的车辆</p></li></ol><p><strong>浏览器WEB端</strong>为AMS的管理后台，使用对象只限于公司内部，由仓库的管理者使用。基本功能包括：</p><ol><li><p>预约仓库管理</p></li><li><p>仓库道口管理</p></li><li><p>时间窗管理</p></li><li><p>车型管理</p></li><li><p>司机管理</p></li><li><p>车辆管理</p></li><li><p>班组管理</p></li><li><p>创建预约</p></li><li><p>预约作业</p></li><li><p>计划与调度</p></li></ol><p>以上功能满足了初版AMS的预约功能，设计思路基于<strong>最小可用原则</strong>，保证能够快速上线，开发周期短的原则为业务提供服务。</p><p>系统的流程如下：</p><p><img src="1698213756245.jpg"></p><p>流程很简单，满足基本操作：</p><p>（1）小程序下单预约</p><p>（2）仓库调度进行审核，预排道口和时间</p><p>（3）预排完成后，就等待司机到仓签到</p><p>（4）签到后进行道口停靠</p><p>（5）开始作业，作业完成后预约结束</p><p>流程简单到无法描述…</p><p>其实你会发现，既然是预约为什么没有 叫号和排队等待的节点，这个要顺便说一下，因素有很多，我觉得主要的有两个：</p><p>1、目前仓储的作业量不是很大，没有大到需要进行排队和叫号的必要</p><p>2、业务形态刚起步，不能改变太大，对现场运营和司机都是一种挑战</p><p>所以暂时的第一版，我们把叫号和排队的功能砍掉了。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="预约仓库管理"><a href="#预约仓库管理" class="headerlink" title="预约仓库管理"></a>预约仓库管理</h3><p>管理可预约的仓库信息，主要包括仓库名称、仓库地址和联系人信息</p><h3 id="仓库道口管理"><a href="#仓库道口管理" class="headerlink" title="仓库道口管理"></a>仓库道口管理</h3><p>为每一个仓库维护可以预约的道口，道口的关键属性有：温区、可停靠的车型，以及道口是否带舌板。</p><p><img src="1698733386595.png"></p><h3 id="时间窗管理"><a href="#时间窗管理" class="headerlink" title="时间窗管理"></a>时间窗管理</h3><p>时间窗管理主要是仓库运营人员对道口和作业的规划，时间窗限定了预约人可以预约的时间段，由仓库运营人员进行维护，根据各仓的作业时段进行合理的安排。</p><p>时间窗不只约束了时间，同时还在此基础上增加了货量、方数和车辆的限制逻辑，使得管理人员不仅可以控制作业的时间，同时对每一个时间段内的作业量也可以进行精准的控制。</p><h3 id="车型管理"><a href="#车型管理" class="headerlink" title="车型管理"></a>车型管理</h3><p>对仓库目前遇到的箱式货车的车型长度的维护和管理，比如：4米2，7米6等等，不同的车型能够停靠的道口是不一样，所以这里需要准确的维护每一辆的车型信息，以此来匹配正确的道口，否则将会出现车型与道口不匹配的问题，对于冷库来说，将会造成跑冷的问题，严重的甚至会撞坏道口的相关设施。</p><h3 id="司机管理"><a href="#司机管理" class="headerlink" title="司机管理"></a>司机管理</h3><p>司机管理就很好理解了，就是管理每次来仓库预约送货或者提货的司机信息，包含司机的姓名和手机号。</p><p><img src="1698733681584.jpg"></p><h3 id="车辆管理"><a href="#车辆管理" class="headerlink" title="车辆管理"></a>车辆管理</h3><p>记录每次预约送货的车辆信息包含车牌和车型</p><p><img src="1698733585969.jpg"></p><h3 id="班组管理"><a href="#班组管理" class="headerlink" title="班组管理"></a>班组管理</h3><p>此处的班组管理只是一个人员的简单分组管理，并没有真实的做到人员的工班调度功能，此处目前只记录了此小组的组长，以及成员名单，用于预约作业的收发货工人调度。</p><p>后续这一块可能会继续完善成一个合理的工班排布功能，当然还得看仓库运作的实际情况是否需要。</p><p><img src="1698733972509.jpg"></p><h3 id="创建预约"><a href="#创建预约" class="headerlink" title="创建预约"></a>创建预约</h3><p>创建预约为预约单在WEB端的入口，仓库运营人员可在此处进行手动创建预约单，此功能的主要目的是，由仓库帮助司机或者客户进行预约，提供的主要功能有：</p><ul><li><p>有单预约：关联出入库订单</p></li><li><p>无单预约：不关联出入库订单</p></li></ul><p>在进行预约单录入时，可填入的信息包含：</p><ul><li><p>货量信息</p></li><li><p>货量的温区信息</p></li><li><p>司机信息</p></li><li><p>车辆车型信息</p></li><li><p>预约时间</p></li><li><p>预约道口</p></li></ul><p>目前做的不好一点是，在进行有单预约时，订单的来源是从OMS和WMS两个系统中进行抽取的，和理想中的规划有很大出入，理想中的是，订单统一从OMS系统进行拉取，因为OMS是整个系统的订单中心，所有的单据源都应以OMS系统为准。</p><p><img src="1698737133671.png"></p><h3 id="预约作业和计划调度"><a href="#预约作业和计划调度" class="headerlink" title="预约作业和计划调度"></a>预约作业和计划调度</h3><p>这两个放在一起讲的原因是因为他们两个是一个东西，只不过以不同的方式进行展示而已：</p><p><img src="1698737614248.jpg" alt="预约作业"><br><img src="1698737818382.jpg" alt="计划与调度"></p><p><strong>预约作业界面</strong>是以常规的表格形式进行展示，可以在此页面看到整个的预约列表，以及可以进行对预约单的操作：</p><ul><li><p>快捷搜索</p></li><li><p>签到</p></li><li><p>安排道口</p></li><li><p>完成</p></li><li><p>取消</p></li><li><p>导出</p></li></ul><p>由于我们去掉了排队叫号的环节，所以整个预约作业就比较简单（你也可以说就是个表格登记………）</p><p><strong>计划与调度</strong>页面是一个道口和时间的表格可视化展示，页面分为左右两部分，左边是以道口和时间为维度形成的一个预约表格，右边展示预约信息，可以进行拖拽，将预约单放到对应的预约时间的表格中，具体操作方式如下：</p><p><img src="149229136182-2023-11-02-09-18-39-627.gif"></p><p>可视化的展示方法更方便仓库运营人员对预约信息进行一个合理的调度和安排，直观清晰的展示第二天的作业信息。</p><h3 id="微信小程序展示"><a href="#微信小程序展示" class="headerlink" title="微信小程序展示"></a>微信小程序展示</h3><h4 id="当前预约页面"><a href="#当前预约页面" class="headerlink" title="当前预约页面"></a>当前预约页面</h4><p><img src="53b0d71511c664f250787411f3c3e1e.jpg" title="当前预约"></p><h4 id="立即预约页面"><a href="#立即预约页面" class="headerlink" title="立即预约页面"></a>立即预约页面</h4><table><tr><td>    <img title="" src="fba472b53baa65602ba92d298260c43.jpg" alt=""></td><td><img title="" src="333f17cf38d8f67fe18072d75313afb.jpg" alt=""></td><td><img title="" src="b892c9ccf5929d2bce1f09932234e8f.jpg" alt=""></td><td><img title="" src="微信图片_202311020958031.jpg" alt=""lt=""></td></tr></table><table><tr><td><img title="" src="微信图片_20231102095802.jpg"><td><img title="" src="微信图片_20231102095803.jpg" alt=""></td><td><img title="" src="微信图片_20231102095801.jpg" alt=""></td><td><img title="" src="微信图片_20231102095800.jpg" alt=""></td><td></tr></table></td></tr></table><h4 id="我的信息页面"><a href="#我的信息页面" class="headerlink" title="我的信息页面"></a>我的信息页面</h4><table><thead><tr><th><img title="" src="微信图片_20231102101101.jpg" alt=""></th><th><img title="" src="微信图片_20231102101006.jpg" alt=""></th><th><img title="" src="微信图片_20231102100904.jpg" alt=""></th><th><img title="" src="微信图片_20231102100906.jpg" alt=""></th></tr></thead></table>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMS策略设计总结</title>
    <link href="/my-blog/2023/02/23/WMS%E7%AD%96%E7%95%A5%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <url>/my-blog/2023/02/23/WMS%E7%AD%96%E7%95%A5%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>WMS（仓储管理系统）作为仓储管理的重要系统，需要支持的主要功能有：</p><ul><li><p>收货</p></li><li><p>上架</p></li><li><p>库存分配</p></li><li><p>拣货</p></li><li><p>补货</p></li></ul><p>另外对于WMS的电商业务操作又牵涉到</p><ul><li><p>快递分配</p></li><li><p>耗材分配</p></li></ul><p>众所周知，仓储管理是一个大的运营体系，一个大的仓储中会管理上百家甚至上千家客户的货物，那么在整个作业体系中就会出现千差万别的作业模型。</p><p>比如：</p><p>1、有些客户要求在收货时，临近过期日期多少天不允许收货，或者在收货时进行提醒，以便于做后面的库存精细化管理；</p><p>2、有些产品对上架的库位有要求，整托的如何上，散托的如何上；优先上高层还是低层；</p><p>3、出库时，订单的库存分配如何分……</p><p>在基于以上复杂的要求，同时为了解决这种B端业务的多样性上，为此设计了一套独有的策略模式。</p><p>此类设计不仅能够满足复杂多变的业务场景，并且可扩展性和灵活度都大大的满足将来未知的业务变化，同时将系统逻辑语言转化为用户所认知的文字描述，使其使用更加通俗易懂。</p><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>其实设计也不复杂，简单来说就是把业务的需求，按照要求进行文字的一段段的切割，每切割下来的一部分文字就作为一个小型算法库，然后最终再将这些小型算法进行组装，一环接一环链接成最终需求。</p><p>举个例子，我们那订单出库分配时的库存分配场景来做描述：</p><p>要求：</p><blockquote><p><em>产品A在进行出库时，需要按照生产日期进行先进先出，先生产的要先出，只能从部分类型的库位上面进行分配出库，货架期到期可以出库，售卖期到期不允许出库，过期品不允许出库，并且要优先分配底层库位，方便拣货，最后某些批属性的库存不允许进行出库</em></p></blockquote><p>其实大家如果只是单纯看这个要求的话还是很难理解清楚，不过不要紧，大家只需要知道，业务有很多要求，我们将这些要求进行一个个的拆分，将他们进行分离出来。很简单是不是：</p><ul><li><p>对生产日期有要求，好像有一个排序在这里</p></li><li><p>对库位的类型也有要求，可以选择哪些库位进行出库</p></li><li><p>对货架期和售卖期也有要求</p></li><li><p>过期的品不能出库，但是也不一定，有时候过期品就是要出库</p></li><li><p>对库位的层数也有要求</p></li><li><p>对库存的某些属性也有出库要求，能不能出</p></li></ul><p>好了，身为一个产品那我们就要把这些需求进行抽象为系统语言了。</p><p>第一个：<strong>对生产日期有要求，好像有一个排序在这里</strong></p><p><img src="2023-02-23-15-42-55-image.png"></p><p>第二个：<strong>对库位的类型也有要求，可以选择哪些库位进行出库</strong></p><p><img src="2023-02-23-15-45-55-image.png"></p><p>第三个：<strong>对货架期和售卖期也有要求</strong></p><p><img src="2023-02-23-15-46-48-image.png"></p><p>第四个：<strong>过期的品不能出库，但是也不一定，有时候过期品就是要出库</strong></p><p><img src="2023-02-23-15-47-29-image.png"></p><p>第五个：<strong>对库位的层数也有要求</strong></p><p><img src="2023-02-23-15-48-00-image.png"></p><p>第六个：<strong>对库位的层数也有要求</strong></p><p><img src="2023-02-23-15-48-24-image.png"></p><p>第七个：<strong>对库存的某些属性也有出库要求，能不能出</strong></p><p><img src="2023-02-23-15-48-40-image.png"></p><p>是不是很简单，将每一个要求都定义成一个小型得算法，对于程序来说其实就是一个个方法，而我们只需要将这些方法暴露出来，让用户自己去选择如何组合即可，最终得到他想要得效果。</p><p>对于<strong>分配策略</strong>我们这里实现得策略因子有：</p><p><img src="2023-02-23-15-53-14-image.png"></p><p>在这么得因子组合下，能够延申出来成千上万的出库分配要求，并且对于系统来说，如果目前的算法因子不能满足，那就可以继续增加新的因子来进行扩展，而不会受到系统架构的限制。</p><p>最终呈现的效果如图：</p><p><img src="2023-02-23-15-55-19-image.png"></p><p>上面的部分就是出库订单的信息，哪些订单哪些产品会被匹配到这条规则。</p><p>出库的分配说白了 ，就是挑库存，哪些订单挑哪些库存，我们只要按照你想要的顺序进行一层层的配置即可达到想要的效果。</p><h3 id="收货策略"><a href="#收货策略" class="headerlink" title="收货策略"></a>收货策略</h3><p><img src="2023-02-23-15-58-44-image.png"></p><p><img src="2023-02-23-15-58-58-image.png"></p><h3 id="上架策略"><a href="#上架策略" class="headerlink" title="上架策略"></a>上架策略</h3><p><img src="2023-02-23-15-59-20-image.png"></p><p><img src="2023-02-23-15-59-36-image.png"></p><h3 id="补货策略"><a href="#补货策略" class="headerlink" title="补货策略"></a>补货策略</h3><p><img src="2023-02-23-15-59-59-image.png"></p><p><img src="2023-02-23-16-00-22-image.png"></p><p>以上策略都是基于相同的设计思想进行设计和开发的。</p><p>而对于耗材策略来说有所不同，这里不在进行阐述，但是基本思想是一样，只是耗材策略牵涉的因素比较多。</p><h3 id="耗材策略"><a href="#耗材策略" class="headerlink" title="耗材策略"></a>耗材策略</h3><p><img src="2023-02-23-16-05-21-image.png"></p><p>以上就是WMS关于策略模式这一块的设计总结，基本都延申了一个设计思想：将需求进行打撒，再进行组装。就像拼图游戏一样，不是吗？</p>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统平台数据权限设计总结</title>
    <link href="/my-blog/2022/11/10/%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <url>/my-blog/2022/11/10/%E7%B3%BB%E7%BB%9F%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要讲解数据权限的设计，当然整个设计的思想核心还是围绕WMS、OMS、TMS系统，这里我们就不在阐述这三者系统是什么？是用来干什么的了，不清楚的小伙伴就自行百度吧。</p><p>先来简单描述一下什么是<strong>数据权限</strong>?</p><p>数据权限是控制哪些人能看到哪些数据的一种技术方案。可以从字面意思上理解：数据、权和限：通过授权来限制某个人或者某个事物能够看到或者访问某些数据。</p><p>举个例子：（例子只和本文的内容有关，不代表全部场景）</p><table><thead><tr><th align="center">A列</th><th>B列</th></tr></thead><tbody><tr><td align="center">1</td><td>1</td></tr><tr><td align="center">2</td><td>2</td></tr></tbody></table><p>现在有一个表格数据，如上。我们现在要求 用户A1 只能看到A列 = 1 的行，用户A2 只能看到A列 = 2 的行，我们通过数据权限的技术实现后，将会呈现以下效果：</p><p>用户A1看到的表格会变成：</p><table><thead><tr><th align="center">A列</th><th>B列</th></tr></thead><tbody><tr><td align="center">1</td><td>1</td></tr></tbody></table><p>用户A2看到的表格会变成：</p><table><thead><tr><th align="center">A列</th><th>B列</th></tr></thead><tbody><tr><td align="center">2</td><td>2</td></tr></tbody></table><p>不同的对象看到同一个表格的不同数据，这就是数据权限要解决的问题。</p><p>以上纯属自己理解，如有不对，请吐槽。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>数据权限的设计方式有很多种，但是相信大家肯定还是要结合自身的实际业务情况去做系统设计。</p><p>目前整个平台的现状主要是分公司、仓库、客户、货主、承运商、供应商这6种对象，但是真正使用系统的对象主要是公司、仓库和货主。</p><p>其实需求很简单，需要实现不同的人进入系统能够看到不同的数据：订单、库存、产品等。</p><p>但是当我们结合自身系统的实际情况来看的话，就会变成：需要有一套数据权限控制模块来整体管理WMS、TMS和OMS这套系统，这样的话问题就变的复杂了。</p><p>因为我们现在的系统WMS、TMS、OMS业务数据都是分开的，按理来说数据权限是可以分开做的，但是我们毕竟是Saas服务，虽然数据是分开的，但是整个平台是一个整体，并且他们的用户角色管理都是一套数据，如果做三套数据权限那未免有点违背了这个平台的概念。</p><h2 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h2><p>其实现在的数据权限模块已经上线使用了很久了，但是在这最后一版前面我们前后已经改了3-4次了（具体次数记不得了）。</p><p>因为我们的系统是从0开始的，并且还是从单体应用做起，那时候只有一个WMS，后来才改造成了微服务架构，并且随着公司的发展，系统数量也慢慢增加，有了TMS和OMS。不过如果按照我们自己的叫法还可以分为：MDM、OMS、WMS、TMS、AMS、UMC这六大系统。</p><p>而本次主要就是围绕UMC（用户管理中心 User Management Center）进行展示，它是管理整个平台的用户信息，其中则就是包含了数据权限这一部分。</p><p>上述原因就是为什么这一块东西会前后改了这么多次的原因，初创公司再加上系统也是从0开始开发，并且公司是做仓储业务的，前期业务形态也不稳定，很难标准化，导致权限这一块也一直跟着调整适应公司的组织结构和业务发展。</p><p>废话说够了，进入正题…</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>直接上图吧。</p><p><img src="2022-11-11-14-45-13-image.png" alt="数据权限ER图"></p><p>你可能会说，咋就突然图就出来了？也不分析一下，构思一下？</p><p>额…这就是分析和构思之后的结果，原因有下：</p><p><code>1、把数据权限就理解成为用户角色的菜单权限即可，那么我们就可以得出来一个和用户角色平级的一个东西：用户组（也可以叫：数据权限组，无所谓了）</code></p><p><code>2、因为我们现在有很多平台：MDM、WMS等等，而每个平台都有自己的特点，尽管都是自己开发但是业务场景不同，需要处理的权限也肯定不同，那么我们就需要把这些规则按照平台的概念将其拆分开来，使其更加灵活</code></p><p><code>3、还是要在平台的概念下再进行细分，从现在系统的现状能抽象出来几种用户的身份：公司级、仓库级、客户级、货主级等等，而这些就是控制系统数据的关键因素</code></p><p>要问我为什么能得出来这样的结论，那我也不知道怎么回答…可能还是对业务场景和系统理解的比较透彻吧，毕竟本身就是做开发出身的。</p><p>既然提到了开发，那就顺便说一句题外话，这一块的设计还真离不开自己的开发经验，这样的设计方案是完全建立在自己懂开发的基础上实现的，如果自己不懂开发的话，设计出来的东西就不知道能不能实现了。</p><p>其实经过上述的思考，相信熟悉数据库表设计的小伙伴了，脑海里已经有表结构了，结合ER图和他们之间的关系，我们能够得出以下表结构：</p><p><img src="2022-11-11-16-22-36-image.png" alt="数据权限表"></p><p>我们来看一下上述图片的表关系：</p><p>1、每个用户都拥有一个用户组</p><p><img src="2022-11-14-09-50-39-image.png" alt="用户与用户组"></p><p>2、每个平台都拥有自己支持权限级别</p><p><img src="2022-11-14-10-08-42-image.png" alt="平台权限级别"></p><p>3、每个用户组都拥有自己在某个平台下面控制的权限列表 ，其中ctrl_id是控制维度的唯一标识例如主键ID，ctrl_type对应的是这个主键ID是什么类型，可以理解为要控制哪一个字段</p><p><img src="2022-11-14-10-09-39-image.png" alt="用户组权限列表"></p><p>现在来看这些表结构比较抽象，因为不知道怎么来使用，下面我们结合程序设计再来详细看一下具体的使用方法。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>其实吧，程序和表结构的设计是息息相关的，如果非要说谁先谁后的话，以我个人考虑问题的习惯还是会先考虑程序架构如何去实现，然后再去考虑什么样的表结构设计才能满足这个程序架构。</p><p>算了，这都不重要，只要能说明整个设计思路就好了，毕竟这篇文章主要是给大家讲明白整个的设计方案。</p><p>在做这个数据权限设计之前，我自己首先是想到了一种方式，就像文章最开始我举得例子，要想控制哪个人能看到哪一行数据，一种方案就是从表字段入手（有没有其他方式我也不知道），我只要能控制每个账号登录进来，让他可以根据每个表的字段来进行筛选，就好比是筛选条件一样，用户A按照A字段进行筛选，得出一批数据；用户B按照B字段进行筛选，得出一批数据。通过这样的效果来进行数据过滤。</p><p>好了，现在我们有了一个大体的方向了，接下来就是要在此基础上进行扩展使其更加灵活和满足业务的实际场景。</p><p>想一下，用户A只能通过A字段来筛选吗？是不是也可以按照B字段来筛选？同样道理，用户B是不是也可以按照A字段来筛选。答案当然是：是。</p><p>那么我们就需要有一个灵活的配置，来解决不同的人能够支持按照不同的字段来进行限制。</p><p>我们再回到上面表设计这一块，上面提到了ctrl_type就代表了要控制的哪一个字段，ctrl_id是具体的数据标识，整合一下，ctrl_type = A/B字段，ctrl_id = 筛选条件，用户A/B就是通过用户组进行关联起来，来取各自的ctrl_type和ctrl_id。</p><p>我们还要进行扩展，结合自身系统的特点，我们是有很多个平台的，那么关于ctrl_type和ctrl_id是不是也要按照平台分开，所以我们最终才能得出sys_group_data_scope表的结构。</p><p>然后，我们把整个链路串起来：用户A有一个用户组，我们通过用户组，在sys_group_data_scope表中找到这个用户在每一个平台下面对应的控制字段和这个字段的值的列表。</p><p>这是我们把表结构和程序设计进行了关联，说明我们的表要怎么使用。</p><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><p>我们基本把实现思路理清楚了，现在就要看这个代码如何去实现。</p><p>程序开发的基本原则不能忘记，像这种数据权限类的系统架构，我们要做到无侵入。我们是使用java开发的，那么要做到无侵入，很容易联想到我们所掌握的基本知识：AOP。AOP确实能够做到无侵入，但是具体要做什么呢？</p><p>很简单，就像上面我们说的，控制能不能看到数据就像筛选条件一样，我们只要把条件加上就可以了。</p><p>其实说白了就是数据库查询的时候把相关的条件拼上去就行了，举个例子：</p><p><code>select * from orders where id in (1,2,3,4)</code></p><p>这个语句相信大家都能看懂，我只要把 in 后面的列表换掉不同值，那么查出来的结果就是不同的行。</p><p>那么我们将这个语句再改造一下，将in后面的列表换成一个变量：</p><p><code>select * from orders where id in (params)</code></p><p>只要我们能动态的改变params，那么我们就实现了动态控制数据的功能。</p><p>我们再结合前面的想法，我们要做到的是可以按照不同的列进行控制，那么我们是不是可以这样：</p><p><code>select * from orders where column_params in (params)</code></p><p>现在我们要做的就是把column_params和params通过无侵入的方式进行动态拼接SQL，我们这里采用的具体方案是：自定义注解+前置增强。</p><p><img src="2022-11-14-13-44-38-image.png" alt="数据权限注解"></p><p><img src="2022-11-14-13-45-48-image.png" alt="数据权限注解切面"></p><p>切面内部的逻辑这里就不进行展开说明了，基本就是，通过用户查询用户组下面的数据权限sys_group_data_scope表，进行拼接SQL，ctrl_type就对应了column_params，ctrl_id就对应了params。</p><p>注解定义好了，具体的使用方法如下：</p><p><img src="2022-11-14-13-55-06-image.png" alt="注解使用"></p><p>我们现在控制数据权限主要只针对表格的查询限制，我们只需要把注解@DataScope放在需要控制权限的接口上面即可。</p><p>@DataScope(ctrlTypes={支持的控制类型},columns={此查询支持控制的表字段},tableAlias=’’)</p><p>最终我们呈现给用户的界面如下：</p><p><img src="2022-11-14-14-06-16-image.png" alt="用户组授权"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文主要记录了整个数据权限设计的思想，当然此设计只是基于自身的业务考虑，并不能代表所有的数据权限设计方案。</p><p>具体的代码细节没有体现的太多，如果真的想搞明白底层的细节恐怕这篇文章是不行的。这里主要还是想表达一下本平台的数据权限的核心思想。</p>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMS结算模块设计总结</title>
    <link href="/my-blog/2022/11/05/WMS%E7%BB%93%E7%AE%97%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <url>/my-blog/2022/11/05/WMS%E7%BB%93%E7%AE%97%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>WMS全称：仓库管理系统（Warehouse Management System），以下提到WMS特指普冷内部系统WMS。仓库管理系统是为仓储行业提供的一套标准系统解决方案，对仓库的进出库货物管理，实现批次效期控制和追溯，能够准确的实时管理仓库货架上的货品库存信息，有效控制并跟踪仓库业务的物流和成本管理全过程。</p><p>普冷WMS提供入库业务、出库业务、调拨业务、退货业务、产品管理、货主管理、库位管理、库存管理等，支持多仓同时使用的SaaS平台。</p><p>目前普冷服务的业务场景有B2B和B2C两种业务类型，客户群体涉及商超、餐饮、电商等业务范围。客户数量种类繁多，业务操作场景复杂，仓储作业中产生的业务操作费随之复杂多样，造成了单证客服每月账单通过手工的方式难以统计，故需要迫切开发系统自动结算功能。</p><h2 id="前期思考"><a href="#前期思考" class="headerlink" title="前期思考"></a>前期思考</h2><p>在进行产品设计之前，首要的两个问题需要先了解清楚：</p><ol><li><p><code>现在手工账单是如何统计的？</code></p></li><li><p><code>普冷与各个客户签订的合同是怎样的？</code></p></li></ol><h3 id="手工账单"><a href="#手工账单" class="headerlink" title="手工账单"></a>手工账单</h3><p>废话不多说直接上图（图片中的数字经过处理）</p><p><img src="2022-11-01-09-22-06-1667265693573.jpg" alt="2C客户手工账单样例"></p><p><img src="2022-11-01-09-32-40-image.png" alt="2B客户手工账单样例"></p><p>从图片中我们可以看到手工账单主要分两大部分，一个sheet为本月每一个收费项目的总金额：invoice，剩下的sheet则为具体的运营操作明细。具体的计算方式都是通过一些函数将明细进行汇总处理之后，链接到invoice的数量列。</p><h3 id="客户合同"><a href="#客户合同" class="headerlink" title="客户合同"></a>客户合同</h3><p><img src="2022-11-01-09-54-59-image.png" alt="2B客户合同样例"></p><p><img src="2022-11-01-09-58-08-image.png" alt="2B客户合同样例"></p><p><img src="2022-11-01-10-06-18-image.png" alt="2C客户合同样例"></p><p><img src="2022-11-01-10-10-00-1667268565217.jpg" alt="2C客户合同样例"></p><p><img src="2022-11-01-10-12-43-image.png" alt="2C客户合同样例"></p><p>上述图片分别列举2B和2C几个合同的样例，每个客户的合同虽然不同，但是基本的原理和结构是一样的。</p><p>这里将当时我分析合同的逻辑描述一下：</p><ul><li><p><code>所有的合同报价中第一列都是收费项目，而收费项目则是说明都有哪些运营作业是需要收费的。</code></p></li><li><p><code>合同中的第二列基本上是说明这个收费项目的一些限制条件，比如下图，总结一下就是说同一个收费项目会根据不同的条件将运作产生的数据计算为不同的价格来收费</code></p></li></ul><p><img src="2022-11-01-10-32-25-image.png" alt="合同样例"></p><ul><li><code>2C部分还有阶梯报价的部分，如下图，我们看最右边的描述，有点像出租车的报价模式，起步价，每增加一件多收多少钱</code></li></ul><p><img src="2022-11-01-10-37-32-image.png" alt="合同样例"></p><ul><li><code>我们再来看下图，主要是收费单位这一列，这一列描述了收费项目是以什么标准进行收费的，有按照托、包裹个数、单子个数、箱数等等，我们这里往WMS系统的数据里面进行对照，无非就是把运营数据按照不同的维度进行了汇总计算，得出的一个数值，比如：（1）仓储费按托来收费的话，那就是要把库存数量值转化为托数；（2）打包费按照每个包裹的件数来收费，其实就是每个订单下面的明细数量总和。其他的收费项目都可已此思路进行推导出收费项目的收费单位到业务数据的表现形式</code></li></ul><p><img src="2022-11-01-11-15-13-image.png" alt="合同样例"></p><p>我们将一个合同进行刨析，拆分每一列来分析后，最终能总结出一个合同包含了三个部分：收费的项目、收费项目的条件、收费项目的计算方式。</p><p>然后我们再以产品的思维去考虑问题，基本能够抽象出具体的产品概念：</p><ul><li><p><code>计费项目</code></p></li><li><p><code>计费条件：对业务数据行的筛选条件</code></p></li><li><p><code>计费因子：对业务数据的不同维度的计算方式</code></p></li></ul><h2 id="业务抽象化"><a href="#业务抽象化" class="headerlink" title="业务抽象化"></a>业务抽象化</h2><h3 id="计费项目"><a href="#计费项目" class="headerlink" title="计费项目"></a>计费项目</h3><p>我们先说<strong>计费项目</strong>，这个也好理解，就是说明收的什么钱，具体到产品中也没有太多的逻辑，可以理解为就是一个类型，因而产品就首先得到一个系统功能：费项管理，功能很简单，我们这里就不展开讲述了。</p><p><img src="2022-11-01-11-37-08-image.png" alt="费项管理"></p><p>由于自身的业务原因，我们将费项管理之上又增加了一层：<strong>货主费项管理</strong>。</p><p>为什么会出现货主费项这一层呢？是因为不同的客户对于同一个费项的叫法不同，并且从用户的角度来看，更希望费项的名字能够更直观的表达出来具体的收费内容（当然，我们从合同中也能发现这一点）。从系统的角度而言，又不可能因为叫法不同，我们就重新开发一套费项计费方式。因而就又增加了这一层，而最原始的费项管理就真的变成了一种计费的类型。</p><p><img src="2022-11-01-11-46-18-image.png" alt="货主费项管理"></p><h3 id="计费条件"><a href="#计费条件" class="headerlink" title="计费条件"></a>计费条件</h3><p>计费条件就要带入具体的业务数据去看了，这样会更好理解一些。我们将合同中表格里面表述的内容用语句表达出来，就拿下面这幅图来说：</p><p><img src="2022-11-01-13-26-08-image.png" alt="合同样例"></p><ol><li><p>在计算仓储费的时候，如果库位是<strong>大库位</strong>，并且库位温区是<strong>冷冻</strong>的话，收费标准是 x元/托/天；</p></li><li><p>在计算仓储费的时候，如果库位是<strong>大库位</strong>，并且库位温区是<strong>冷藏</strong>的话，收费标准是 x元/托/天；</p></li><li><p>在计算仓储费的时候，如果库位是<strong>小库位</strong>，并且库位温区是<strong>冷冻</strong>的话，收费标准是 x元/托/天；</p></li><li><p>在计算仓储费的时候，如果库位是<strong>小库位</strong>，并且库位温区是<strong>冷藏</strong>的话，收费标准是 x元/托/天；</p></li><li><p>在计算入库装卸费的时候，如果是<strong>带托</strong>的，收费标准是 x元/托/次；</p></li><li><p>在计算入库理货费的时候，如果<strong>3&lt;= 品项&lt;=8</strong>的话，收费标准是 x元/托/次；</p></li><li><p>在计算入库理货费的时候，如果<strong>9&lt;= 品项</strong> 的话，收费标准是 x元/托/次；</p></li></ol><p>总结一下：什么东西在满足什么条件的时候，收费是什么。</p><p>那么我们又能从此分析中抽象出一个系统概念，费项需要能够支持各种维度的筛选条件，并且这些条件要能够支持多层的过滤，一层层筛选。</p><p>我们结合自己业务数据的实际情况，将可能会出现的筛选条件都统一出来，得出一个系统功能：<strong>条件管理</strong></p><p><img src="2022-11-01-13-39-56-image.png" alt="条件管理"></p><p>每一个条件其实就是对应一条数据的某个字段，熟悉数据库的同学可能会更好理解，数据库中的一列就可以做为一种条件存在。但是也是有前提的，并不是所有的列都可作为条件，必须是那种在一定的可变范围内的，例如：温区，对于冷链仓储来说，温区就那三四种。条件具体的使用方式，我们继续往下看，后面会慢慢带入。</p><h3 id="计费因子"><a href="#计费因子" class="headerlink" title="计费因子"></a>计费因子</h3><p>计费因子单纯从字面意思来看比较抽象，我们还通过举例的方式来 说明。</p><p>例如：我们都知道计算费用用数学公式表示就是：总费用 =数量 * 单价。单价是人定的，我们先不管，来看【数量】这个变量，带入具体的业务场景来看：仓储费 = 总托数 * 单价，那么我们是不是要先拿到这个总托数的值，然后系统才能去进行计算。</p><p>我们再看一个例子。</p><p>例如：出库拣货费 = 总箱数 * 单价，【总箱数】这个值我们也需要让系统进行计算出来。</p><p>好了，例子就说这两个，其他的费用计算都是同样道理，只是每个费用计算的时候这个因子的参考值不同而已。</p><p>综上，我们总结并设计了系统功能：<strong>因子管理</strong></p><p><img src="2022-11-02-11-48-40-image.png" alt="因子管理"></p><p>可以看出每个因子都定义了一种计算方式，具体到程序里面就是一个个方法，每个方法就是一个个小型的算法库。而这种方式又能做到无限扩展。</p><p>想必到这里大家应该有一些基本的了解了，可能会问，这三个东西咋用？好像没啥关联啊。是的，到目前为止他们还没有串起来，我们继续头脑风暴。</p><h3 id="三者整合"><a href="#三者整合" class="headerlink" title="三者整合"></a>三者整合</h3><p>我们在整理一下思路，要得到一个费项的费用，我们首先要选择一个<strong>计费项目</strong>，如果有条件的话再把<strong>计费条件</strong>加上，然后再选择一种<strong>计费因子</strong>，这样他们三者的关系就建立出来了。</p><p>首先我们要整合的关系是计费因子和计费条件，并且我们也只会将两者先进行关联整合，如下图：</p><p><img src="2022-11-02-13-34-44-image.png" alt="因子与条件关联"></p><p>图片所示为计费因子=库存托数(库位码)来举例，下面绑定了它可以按照什么样的条件来产生这个因子的值。</p><p>我们可以这样理解，有一群小朋友，我们现在要进行分组：</p><ul><li><p><code>分组方式一：5岁以下的一组，5到10岁的一组，10岁以上的一组；</code></p></li><li><p><code>分组方式二：男生一组，女生一组</code></p></li><li><p><code>分组方式三：先按照分组方式一分组，再按照分组方式二分组</code></p></li></ul><p>以不同的方式来分组得出的组数是不是不一样？上面的计费因子就等于小朋友分组后的组数，计费条件就是分组的方式，这样按照不同维度计算出来的结果就会不一样。这样的系统设计可以最大成度的覆盖更多的应用场景。</p><p>当然每一个因子能够支持的计费条件都是自己需要按照业务场景事先设定的，不是随便绑定的。</p><p>对于计费项目其实我们并没有和计费因子+计费条件进行绑定，因为就像前面说的计费项目就是一个类型一个说明，就好比拿仓储费来说，没有人规定只能从库存的数据上面计算仓储费，实际的业务场景也有可能会从出入库订单层面去计算仓储费。</p><p>另外不进行关系绑定，又能使系统支持的业务场景更加丰富，就算没有前面的实际业务场景，我们不进行关系绑定也无可厚非，如果你非要拿库存托数去计算订单操作费，计算出来的是错误的，也只能说明你自己配置错了。</p><p>还有一个原因就是系统架构设计的思维了，这个我也不知道怎么表述了…</p><p>当然，此处不绑定并不代表永远都不绑定了，请看图：</p><p><img src="2022-11-02-14-04-30-image.png" alt="三者整合"></p><p>上面所有的铺垫，其实就是为了得出这个图，好累啊。</p><p>下面那一行就是条件，并且是支持添加子条件，是一个树结构的设计，不同的条件呢，就会有不同价格，其实上面文字里面也有提到这一点。（额…界面样式可以吐槽，但是逻辑就是那样）</p><p>很好，我们已经得出了一个最基本的三者整合设计，发挥想象，结合业务场景，考虑可扩展性，考虑适配更多的场景，最后成果：</p><p><img src="2022-11-02-14-19-52-image.png" alt="合同明细配置1"></p><p>也可以是这样：</p><p><img src="2022-11-02-14-21-07-image.png" alt="合同配置明细2"></p><p>又或者是这样：</p><p><img src="2022-11-02-14-22-20-image.png" alt="合同配置明细3"></p><p>这样：</p><p><img src="2022-11-02-14-23-26-image.png" alt="合同配置明细4"></p><p>只有想不到，没有做不到（夸张句，请忽略）。</p><p>最终三者的整合已经全部呈现出来，而呈现的方式我们仍然是通过合同的方式将其绑定。我们在系统中增加了：<strong>应收计费配置</strong>，其实就是通过系统来呈现出一张完整的合同，如图：</p><p><img src="2022-11-02-14-27-53-image.png" alt="应收计费配置"></p><p>至此，我们通过刨析合同、场景分析，将一张纸抽象进了系统，配置出一个能让计算机程序识别的东西：<strong>应收计费配置</strong>。</p><p>结束了吗？No No No，这才刚进入正题。</p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p>懂系统懂程序的同学看到这里应该已经有疑问了，既然是配置，那配置配好了咋用？谁来用？何时用？</p><p>这些问题我们先放放，最关键的一个东西：<strong>数据</strong>。</p><p>既然我们是在讨论WMS计费，那计谁的费？当然是业务操作所产生的数据费用。</p><p>数据呢？数据在WMS的业务数据库。</p><p>可是业务数据是非常细非常零散的数据，而我们计费都是取的不同维度下的总数，如果我们直接拿业务数据去处理的话，恐怕有点难度。从架构的角度来看，就不行，数据量运算逻辑大的话，会对业务数据库造成压力，可能导致宕机。</p><p>既然不能直接从业务数据库直接取，那就搞一个主从同步？从从库取数据。差不多是这个思路，但又不完全是，只对了一半。</p><p>还是要分析场景：</p><p>（<code>1）计费取到的都是按照不同维度下进行计算后的数据，业务数据库无论是主库还是从库都是没有办法直接取到的，从哪个库取都不合适</code></p><p><code>（2）系统计算费用的逻辑非常复杂，压力要进行分摊，不能集中在一个时间点处理或者一步全部处理完，容易宕机</code></p><p>基于以上考虑，再结合自己业务和系统的架构我们引入新的数据存储机制：<strong>业务数据中心</strong></p><p>整体的数据处理机制如图所示：</p><p><img src="2022-11-02-15-52-47-image.png" alt="数据抽取"></p><p>在进行ETL数据抽取时，我们已经按照相关的计费因子将系统的数据进行了提前计算，这样就同时满足了上面两点的顾虑。</p><p>存储到数据库中的数据大概是这样的：</p><p><img src="2022-11-03-09-19-09-image.png" alt="数据中心库"></p><p>通过右边的注释可以看出，数据中心的数据已事先计算，而计算好的数据又恰巧是对应我们计费因子的，这样在进行费用计算时只需要通过相关的因子去取对应列的数据即可，这样将压力进行分摊，提前处理，将系统资源合理分配开，这样对业务和应用都不会有较大的影响。</p><p>数据中心的数据我们是按天进行抽取的，我们也称之为：<strong>日结数据</strong>。</p><p>现在我们通过每天将业务数据抽取到数据中心产生每日的日结数据，解决了数据源的问题，接下来我们继续来说开头的那几个疑问，这些数据怎么用？何时用的问题。</p><h2 id="开始计费"><a href="#开始计费" class="headerlink" title="开始计费"></a>开始计费</h2><p>在开始之前，有必要简要说明一下整体计费的流程：</p><p><img src="2022-11-03-11-03-24-image.png" alt="计费流程"></p><p>流程如上图，分两步，先生成日结账单，再由日结产生月结账单。</p><ul><li><p><code>日结账单：每个客户每天会产生一份日结账单</code></p></li><li><p><code>月结账单：每个客户每个月按照账期将每天的日结账单汇总后，产生一份月结账单</code></p></li></ul><p>由数据中心产生日结账单，可以看到我们这里使用了批处理作业的方式，就是通过定时任务每天几点开始执行，而具体的处理逻辑，定时任务则是需要按照用户通过<strong>应收计费配置</strong>设置的每个客户合同的计费方式，如图：</p><p><img src="2022-11-03-11-20-00-image.png" alt="计费合同"></p><p>系统会参照上图的配置规则将数据中心的数据进行处理加工产生一条日结账单：</p><p><img src="2022-11-03-11-22-20-image.png" alt="日结账单"></p><p>具体的执行逻辑我们这里就不展示了，这是属于开发层面的东西。</p><p>从上述日结账单的图片中可以看出，每一个客户每天都会产生一条日结账单数据。</p><p>我们随便找一天数据，点击后面的【查看】可以看到里面具体的计费项目：</p><p><img src="2022-11-03-11-25-36-image.png" alt="账单费项"></p><p>这里所展示的货主合同费项就是此货主配置的应收计费配置里面的一条条配置。</p><p>而月结账单和日结账单一样，就是把多条数据进行汇总成一条数据的呈现方式，我们来看一条月结账单的费项明细：</p><p><img src="2022-11-03-11-29-13-image.png" alt="月结账单"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是设计WMS结算模块的全部思路，当然本文章也不能将全部的细节都呈现出来，主要是记录本人在设计这一块功能时的整个历程以及是如何分析这一部分的内容，如何将业务场景进行一步步抽象成系统可识别语言。</p><p>文章的顺序虽然是先分析了合同，后抽象三个系统名词：费项、因子、条件，但是自己大脑还是要有一个整体的思路和布局，不然后面的数据中心的设计，也衔接不上前面定义的功能。</p><p>图片中的系统样子也不可能一步就实现的，也是通过后续上线后一步步完善的，用户提需求再进行开发，比如计费因子刚上线的时候也就10个左右，现在可以看到系统里面已经有几十个了，但是整体的架构和流程并未改动任何地方，现在的使用情况无非就是哪个客户的计费比较特殊，我们需要再重新定义一个新得计费因子来进行满足。</p><p>具体的使用情况，我这里就不做描述了，肯定不会差的，相信后面只会越来越好。</p><p>放眼整个WMS功能，本人自己觉得结费这一块做的应该是最好的，可圈可点，当然任何一个产品功能不可能满足所有的业务场景，是吗？？</p>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OMS设计总结</title>
    <link href="/my-blog/2022/10/24/OMS%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <url>/my-blog/2022/10/24/OMS%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>普冷订单管理系统（下文统一使用OMS）是普冷WMS和TMS的订单入口，客户订单统一由OMS建单，经一定的逻辑处理后推送给下游系统进行作业。下游系统作业完毕之后，再将实际的作业数据进行回传OMS，整个数据流形成闭环。</p><p>目前OMS系统只处理ToB型业务订单，对ToC业务订单数据流暂不经OMS处理，仍然保持从ERP推送到普冷EDI，经EDI直接推送到WMS。电商订单实际发货信息也由WMS直接回传EDI，再由EDI回传ERP。</p><p>ToC业务的订单暂时不流入OMS考虑如下，这些考虑是结合普冷自身业务情况所得，不可一视同仁：</p><ul><li><p><code>ToC订单对时效性要求高，经OMS后多系统之间相互交互数据链条复杂，影响作业效率</code></p></li><li><p><code>同时对于电商来说订单取消概率大，多系统交互对于取消不及时，造成仓库错发误发，增大赔付率</code></p></li><li><p><code>另外OMS现今更大的作用还是服务与普冷仓配一体项目的作业流程，为了打通WMS和TMS系统，ToC订单目前只做仓储业务，没有必要再进入OMS</code></p></li></ul><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>普冷整个系统数据流转图如下，下图为普冷业务最标准的仓配一体项目数据流转顺序：<br><img src="1666238182098.jpg" alt="数据流转图"><br>在此基础上还会有其他业务场景：纯仓储业务、纯运输业务以及仓配一体业务的其他数据流转方式。其他的业务场景表现到图中无非就是少一些步骤或者改变步骤的执行顺序，总体流程大同小异。</p><h3 id="OMS结构"><a href="#OMS结构" class="headerlink" title="OMS结构"></a>OMS结构</h3><p>从<strong>数据流转图</strong>中可以看出OMS在整个数据链路中所处的位置，OMS衔接了EDI和下游业务系统，是整个业务系统的中枢所在。</p><p>OMS在结构上设计为了两层结构：</p><ol><li><p><code>客户订单：客户原始订单</code></p></li><li><p><code>下游作业单：有原始订单根据不同的业务场景进行拆分，生成下游系统的作业单</code></p></li></ol><p>第一层和第二层的转换关系需要带入具体的业务场景进行说明会更好理解，我们按照普冷目前的业务场景进行细化，分别介绍在不同业务场景下两者的变化关系。</p><h4 id="仓配一体"><a href="#仓配一体" class="headerlink" title="仓配一体"></a>仓配一体</h4><p>仓配一体在实际业务中的表现用一句话概况就是，由普冷运输车队从普冷自由仓库提货后，送往客户指定目的地。</p><p>从这个场景中可以提炼出来，对于订单流的话，需要同时发往普冷的TMS和WMS系统，分别由车队排车和仓库发货。如果没有OMS的话，那么普冷两边的系统都要进行建单操作，人工操作麻烦。</p><p><img src="1666258067870.jpg" alt="仓配一体"></p><p>引入OMS的两层结构，OMS的第一层保留客户的原始订单需求，在OMS中通过一定的策略配置，将客户原始订单拆分成两份作业单，一份发往TMS：运输作业，一份发往WMS：出库作业。这样既保留了客户原始订单，又对照了下游作业类型，同时减少人工操作，系统结构清晰。</p><p>对于第二层中的两个作业类型，系统也并不是同步产生两个作业单，在设计初期考虑到实际场景是：当TMS的排程排车信息结果出来后，需要将排车信息随订单一起下发给仓库进行作业。所以系统在产生两层作业时，采用了异步处理的方式：</p><ol><li><p><code>第一层订单先生成运输作业</code></p></li><li><p><code>运输作业下发TMS</code></p></li><li><p><code>TMS排程排车信息回传OMS</code></p></li><li><p><code>OMS的运输作业单状态更新，自动生成仓库的出库作业，下发WMS</code></p></li></ol><p>这里主要解释仓配一体业务的结构，基于此结构，无论是纯仓储的业务还是纯运输的业务，在OMS的两层结构上无非就是少了一种作业类型而已，对于其他的系统流程和设计思想是一样的。</p><h3 id="核心引擎"><a href="#核心引擎" class="headerlink" title="核心引擎"></a>核心引擎</h3><p>OMS毕竟不只是为了仓配一体出库这一个场景而生的，既然是仓储业务，那必定会有入库、出库、调拨等作业类型，而仓配一体只是出库类型下面的一个业务场景。</p><p>这里再描述一个复杂的业务场景：仓配一体+仓间中转，有北京仓库出库，经普冷北京运输车队先送往上海仓库集货后再由上海车队送往上海的门店（可能具体的业务也不会发生，但是系统设计还是要考虑最复杂的场景）。</p><p>从这个场景中能提炼出来：</p><ol><li><p><code>北京仓库的出库作业</code></p></li><li><p><code>北京运输的运输作业</code></p></li><li><p><code>上海仓库的入库作业</code></p></li><li><p><code>上海仓库的出库作业</code></p></li><li><p><code>上海运输的运输作业</code></p></li></ol><p>这么多的单据如果是通过人工在OMS中生成，工作量同样是很大的。</p><p>因此，我们在OMS两层结构中引入了新的机制：<strong>事件</strong>，事件分为两个部分：事件因子和事件配置，我们同样以举例的方式来说明：</p><p><code>例如1：在上述场景中，仓配一体在OMS中需要先生成一个运输作业，那么这就是一个事件，我们将其抽象为因子，再具体到系统里面就是：什么样的订单在什么时候要先生成一个运输作业。</code></p><p><code>例如2：将生成的作业单需要推送给下游系统，同样是一个事件，这样我们就得出一个因子：自动将作业单推送给下游系统</code></p><p>最终我们在系统里面实现的结果如下：</p><p><img src="2022-10-24-14-15-24-image.png" alt="事件因子"></p><p>从上面表格中的事件因子名称不难猜出每个因子是做什么的，当我们把这些事件通过事件配置进行串联起来之后，我们就会得到以下结果：</p><p><img src="2022-10-24-13-43-06-1666590181345.jpg" alt="点击放大"></p><p>或者是这样：</p><p><img src="2022-10-24-13-44-06-image.png" alt="点击放大"></p><p>有了这样的事件配置之后，对应的订单将会按照这样此种配置场景进行执行：</p><p><img src="2022-10-24-13-50-07-image.png" alt="点击放大"></p><p>这一套事件配置不仅给用户展示了不同业务场景下多系统订单流数据的可视变化，同时也对用户建单作业省去了可量化的操作成本。此事件功能为OMS设计的<strong>核心</strong>功能，又是订单流处理的<strong>引擎</strong>所在。</p><p>以上则为OMS作为2层结构的所有设计思想。</p>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于库存中心的思考</title>
    <link href="/my-blog/2022/10/09/%E5%85%B3%E4%BA%8E%E5%BA%93%E5%AD%98%E4%B8%AD%E5%BF%83%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/my-blog/2022/10/09/%E5%85%B3%E4%BA%8E%E5%BA%93%E5%AD%98%E4%B8%AD%E5%BF%83%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>普冷是一家仓储物流公司，现有仓库在全国有20多个，上线正式使用的系统有MDM、OMS、WMS和TMS。其中全国各仓统一使用一个WMS云平台进行作业，系统数据按照仓库级做数据隔离，每个仓库都有单独的货主、产品、订单和库存。<br>基于公司业务发展和管理层要求，现需要对全国主数据进行统一管理，并且此主数据能够承担整个普冷主数据中心的角色，因此引入了MDM（Master Data Management）的概念。<br>目前普冷的客户有些是全国仓性质的，比如A客户即在北京仓发货、又在上海仓发货，WMS按仓进行数据隔离，主数据资料存储了两份，一份在北京仓下，一份在上海仓下，而在MDM中只存储一份。<br>数据流程为：ERP推送数据到普冷EDI，EDI再将数据下发给MDM，MDM会按照配置规则将主数据分发到各仓的WMS系统。流程如下：<br><img src="./1665286798599.png" alt="图片1"><br>这样引入MDM后可以解决主数据统一管理的问题，但是对于数据层面来说毕竟是产生了新的数据，进入了新的表，产生了新的主键ID，这就是关键问题，下面说明这个问题造成的影响。<br> <code>说明：WMS内部主数据不统一并不是系统设计问题，引入MDM是从公司管理角度出发 </code></p><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>现在普冷上线了OMS系统，但是只对订单层面做了功能实现，系统中并没有库存的概念。系统需要完善此项功能，基于两方面考虑：</p><ul><li>OMS需要具备库存管理功能，可以不需要像WMS一样细粒度管理，但是要有库存概念</li><li>部分业务场景进入OMS后，需要进行库存比对，以保证下游仓库库存量能够满足订单量</li></ul><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>现在的库存管理是在WMS系统内部的，虽然是微服务架构但是和WMS的耦合度还是很强的，我们打算将库存管理从WMS解耦出来，做成库存中心，为什么要叫它中心？是因为OMS的原因，虽然OMS可以不管到像WMS那样细粒度的库存，但是OMS还是要有库存的概念存在的。</p><p>那么问题来了：OMS中用到的主数据是MDM，WMS用到的主数据是自己内部的数据，而现在的库存管理存储的数据是按照WMS的主数据进行存储的，所以现在的库存管理如果直接做成库存中心，OMS是无法查询库存对照关系的，因为两边的主数据是不一致的<br><img src="./%E7%9B%AE%E5%89%8D%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="目前的存储结构"></p><h2 id="期望效果"><a href="#期望效果" class="headerlink" title="期望效果"></a>期望效果</h2><p>将库存数据从WMS中解耦出来，抽象出一个库存中心，这样OMS和WMS就可以共用一份库存数据，两个系统也不需要考虑库存同步问题。<br><img src="./%E6%9C%9F%E6%9C%9B%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="期望的存储结构"><br>如果两边都有库存的话，存储结构就会如下：<br><img src="./%E4%B8%A4%E4%BB%BD%E5%BA%93%E5%AD%98%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="两份库存存储结构"><br>这样OMS的库存和WMS就需要考虑库存同步问题：</p><ol><li>入库</li><li>出库</li><li>库存修改</li><li>盘点</li></ol><p>等等一系列引起库存变动的操作都需要考虑同步问题，基于与之前外部系统做库存同步的接口经验来看，一是工作量很大，场景很多，需要全盘考虑，不能漏掉任何一处的业务场景；二是做好之后两边库存对账仍会有很大差异，那么我们如果存储两份库存再进行同步可能要再慎重思考。当然还有一个原因是，普冷和外部客户系统是两个系统他们无法实现一个库存中心，而普冷是一个平台下的应用，库存中心的概念是合理的。</p><h2 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h2><p>既然要做库存中心，首先第一步要解决的就是把现在的库存管理从WMS系统中抽离出来，第二步要考虑上述提及的问题：主数据不统一，一份库存很难同时与两份主数据做对照关系。</p><p>第一步是纯技术问题这里不做过多阐述<br>第二步有三种解决方案（目前只想到了这三种方案）：</p><ol><li>库存中同时增加MDM和WMS主数据两个关系</li><li>库存中保留原结构还与WMS主数据保持一致，通过程序代码实现MDM主数据与WMS主数据的的关系进而找到对应的库存</li><li>对库存中心进行分层，分两层：WMS库存、OMS库存；在原来的库存基础上再拆分一层库存出来，重新对库存进行建模，使其满足OMS库存模型的设计，毕竟两者对库存管理的维度不同。</li></ol><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>第一种想法是在现在的库存表中增加MDM主数据相关的字段信息，这个开发工程量很大，WMS的业务逻辑恐怕都需要进行调整，并且这样两边的耦合度太高，为了做一个库存中心而增大整个平台的耦合性不值得，所以这个方案也被排除在外，不考虑。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>对于方案二就是底层仍然使用一套表结构，所有的逻辑都要通过代码层面去实现，当然开发的难度会增加。这里我们不光要考虑两边主数据不一致需要映射的问题，还需要通过代码去处理OMS库存的模型问题，上面也一直提到，OMS的库存会和WMS库存的维度不同，而这一层关系如果使用代码来实现的话，恐怕需要一个很复杂的算法来支撑。</p><p>当然这个还是要看企业内部对OMS库存的管理维度，是否需要做到精细化管理，还是只是做一个简单的进销存。</p><p>这种处理方式其实有点像，目前我们和外部客户对接库存同步时的场景。内部和外部在进行库存接口同步时，我们不可能将WMS内的库存不经过任何处理，全部都传给客户，当然客户使用的各大ERP系统相信也不会去接受WMS内部如此细致的库存详情，具体到库位、托盘各个批属性等等。所以我们换个角度来看，现在的OMS就是外部客户的ERP，现在要进行库存同步，当然也不绝对是，OMS的库存可能要比客户ERP的库存稍微简单一点，因为不涉及前端电商销售的库存情况。</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>其实对于第3种方式和我们上面说的两份库存的存储结构有点一样，可以说一样也可以说不一样，具体得看我们技术上的怎么去实现这个效果。</p><p>如果说，我们像和对接其他外部系统一样通过接口去同步两边的库存数据，那就一样。</p><p>如果说，我们使用其他的技术方法来保证两边的库存数据实时同步，而不考虑具体的业务操作场景，只是单纯的同步两边的数据，那就是不一样的。虽然是两份库存，但是这两份库存是纯技术方式进行数据同步的，是从最底层的表数据同步，而这时候就和业务场景没有关系了，我们也不需要开发大量的接口来做数据同步。</p><p>具体要怎么做的话也没想到很合适的方式，比如：通过构建试图？触发器？还是说我们引入一些数据同步的中间件来保证两边的数据实时同步，这样的好处是进行了解耦，并且同步逻辑可控，按照实际需求进行处理即可。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本次只是一些想法，如果要做的话，这个库存中心将会是一个怎样的方法。这里唯一一点的好处就是WMS部分的仓储库位也是由自己开发的，无论是再此基础上面进行改造升级还是重新构建OMS库存，两者共同组成库存中心，都是可取的。</p>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B端产品 VS C端产品</title>
    <link href="/my-blog/2022/10/08/B%E7%AB%AF%E4%BA%A7%E5%93%81-VS-C%E7%AB%AF%E4%BA%A7%E5%93%81/"/>
    <url>/my-blog/2022/10/08/B%E7%AB%AF%E4%BA%A7%E5%93%81-VS-C%E7%AB%AF%E4%BA%A7%E5%93%81/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直都在做B端产品，并且接触到的系统是从0到1一点点做起来的，虽然没有做过C端产品但是之前看过些资料来说明B端产品与C端产品的区别，这里总结一下个人想法。其实对于<em><strong>B端产品</strong></em>和<em><strong>C端产品</strong></em>也可以看作是<strong>传统行业产品</strong>与<strong>互联网行业产品</strong>的对比。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p><em>之前在小红书上面看到的一位大佬介绍两者的不同点简单进行以下总结(视频和博主找不到了，实在抱歉，可能会有偏差)：</em></p><ul><li><h6 id="用户粘性"><a href="#用户粘性" class="headerlink" title="用户粘性"></a>用户粘性</h6></li></ul><p>ToC产品更关注用户量的增长，需要在极短时间内实现大量的用户，要求时间短市场定位准确，来增加用户粘性。</p><p>ToB产品则是更注重对用户或者说企业问题的精准定位和解决方案，通常一个B端产品会在一个领域内做到极致，公司会经过长久打磨沉淀建立自己的品牌，与企业长久磨合最终形成用户增长和用户粘性。</p><ul><li><h6 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h6></li></ul><p>ToC产品的设计更注重个人用户在某些场景下的特定需求，要求页面美观操作简单等。</p><p>ToB产品更注重解决企业的实际问题，往往界面复杂功能众多，产品经理需要考虑整个链条的业务逻辑。</p><ul><li><h6 id="商业模式"><a href="#商业模式" class="headerlink" title="商业模式"></a>商业模式</h6></li></ul><p>ToC产品在商业化上注重用户付费量的积累，可以理解为每个用户可能每次付费10块20块积少成多，以及流量广告效应带来的收益等。</p><p>ToB产品更关注用户质的变化，大型知名企业所带来的口碑要比众多不知名小型企业要强许多，还有就是企业后续的续费问题代表了产品的真正价值。</p><hr><p><em>这里也从 苏杰老师的<a href="">《人人都是产品经理1.0》</a>摘录一些文章内容：</em></p><p><img src="1665219397225.jpg" alt="人人都是产品经理"></p><table><thead><tr><th>特点</th><th>典型的传统行业</th><th>互联网、软件行业</th></tr></thead><tbody><tr><td>行业形态</td><td>成熟行业</td><td>新兴行业</td></tr><tr><td>产品形态与成本结构</td><td>实物</td><td>虚拟物品</td></tr><tr><td>生命周期</td><td>几年</td><td>几个月</td></tr><tr><td>盈利模式</td><td>单一卖产品</td><td>多元盈利</td></tr><tr><td>用户心态</td><td>花钱买</td><td>免费用</td></tr></tbody></table><ul><li><h6 id="从行业形态上来看"><a href="#从行业形态上来看" class="headerlink" title="从行业形态上来看"></a>从行业形态上来看</h6></li></ul><p>传统行业的产品都比较成熟，有的软件已经存在十几年甚至几十年，哪怕不同产品供应商对于同一款产品他们的基本框架都是一样的，很难有一些重大创新。并且这样的产品对应的用户群体也是一样，用户都已经非常熟悉此类产品，也很难去改变用户的使用习惯。</p><p>比如：WMS、金蝶、泛微这一类B端系统</p><p>而互联网、软件行业就不一样，三天一小变、五天一大变，产品需要不断的创新突破，谁能先入为主谁就能够称王。</p><p>比如：淘宝、抖音、叮咚买菜这一类C端系统</p><ul><li><h6 id="从产品形态与成本结构来看"><a href="#从产品形态与成本结构来看" class="headerlink" title="从产品形态与成本结构来看"></a>从产品形态与成本结构来看</h6></li></ul><p>传统行业的产品多为实物，采购、仓储、物流等分工，产品研发出来以后，还有大量的制造成本，产品经理需要考虑如何打通整个供应链。</p><p>而互联网、软件行业无论是团队还是成本都是非常小，几个人就可以组建一个公司，几周就可以推出一款APP。</p><ul><li><h6 id="从生命周期来看"><a href="#从生命周期来看" class="headerlink" title="从生命周期来看"></a>从生命周期来看</h6></li></ul><p>传统行业的软件研发周期一般都是按年来算的，因为此类软件的产品形态决定了它的生命周期不得不需要花费这么久的时间去规划复杂的业务流程。</p><p>而互联网、软件行业则很短，现在也流行敏捷开发，产品的生命周期自然不言而喻。</p><ul><li><h6 id="从盈利模式来看"><a href="#从盈利模式来看" class="headerlink" title="从盈利模式来看"></a>从盈利模式来看</h6></li></ul><p>传统行业多为卖产品或者订服务，通过渠道分销，总之就是靠产品本身赚钱。</p><p>互联网、软件行业的产品大部分都是免费的，他们赚钱的渠道则是流量所带来的广告效益。</p><ul><li><h6 id="从用户心态来看"><a href="#从用户心态来看" class="headerlink" title="从用户心态来看"></a>从用户心态来看</h6></li></ul><p>传统行业软件用户买来之后，花了钱，哪怕有一个功能恶心到家了，也不得不用，自己掏的钱，咬着牙也得继续用，做不到说立刻再换一个。</p><p>互联网、软件行业的用户心态就不同了，毕竟是免费用的，哪里用着不舒服的自己就可以立马换一个，对于这种情况产品经理就比较痛苦了，要考虑用户的使用体验，交互设计，UI界面的美观度等等，真正体会到“用户是上帝”的感觉。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>从上面可以看出无论是看B端和C端还是看传统行业与互联网软件行业，他们的虽然分析的点不同但是表达的意思都是一样的。</p>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心得总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>仓储服务一体化平台</title>
    <link href="/my-blog/2022/10/08/%E4%BB%93%E5%82%A8%E6%9C%8D%E5%8A%A1%E4%B8%80%E4%BD%93%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    <url>/my-blog/2022/10/08/%E4%BB%93%E5%82%A8%E6%9C%8D%E5%8A%A1%E4%B8%80%E4%BD%93%E5%8C%96%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="SaaS平台介绍"><a href="#SaaS平台介绍" class="headerlink" title="SaaS平台介绍"></a>SaaS平台介绍</h2><p>基于SpringCloud开发的集订单管理(OMS)、仓储管理(WMS)、运输管理(TMS)与一体的SaaS平台</p><ul><li><h6 id="UMC【用户管理中心-User-Management-Center】"><a href="#UMC【用户管理中心-User-Management-Center】" class="headerlink" title="UMC【用户管理中心 User Management Center】"></a>UMC【用户管理中心 User Management Center】</h6><p>UMC提供整个平台的用户账号管理，通过Oauth2.0实现认证授权，各个平台单点登录，集成手机号验证登录、微信扫描登录。</p></li><li><h6 id="MDM【主数据管理-Master-Data-Management】"><a href="#MDM【主数据管理-Master-Data-Management】" class="headerlink" title="MDM【主数据管理 Master Data Management】"></a>MDM【主数据管理 Master Data Management】</h6><p>MDM提供整个平台的基础数据管理。功能有：客户管理、货主管理、产品管理、包装管理、地址管理、承运商管理、供应商管理、字典管理。</p></li><li><h6 id="OMS【订单管理系统-Order-Management-System】"><a href="#OMS【订单管理系统-Order-Management-System】" class="headerlink" title="OMS【订单管理系统 Order Management System】"></a>OMS【订单管理系统 Order Management System】</h6><p>OMS为整个平台的订单入口，统一派发统一监控。功能有：订单管理、任务计划管理、任务拆分、事件配置管理、节点监控、库存管理。</p></li><li><h6 id="WMS【仓储管理系统-Warehouse-Management-System】"><a href="#WMS【仓储管理系统-Warehouse-Management-System】" class="headerlink" title="WMS【仓储管理系统 Warehouse Management System】"></a>WMS【仓储管理系统 Warehouse Management System】</h6><p>WMS提供仓储服务功能，按照仓库维度做数据隔离。功能有：入库作业、出库作业、越库作业、库存作业、结算管理、电商发货、物流轨迹查询等。</p></li><li><h6 id="TMS【运输管理系统-Transportation-Management-System】"><a href="#TMS【运输管理系统-Transportation-Management-System】" class="headerlink" title="TMS【运输管理系统 Transportation Management System】"></a>TMS【运输管理系统 Transportation Management System】</h6><p>TMS承接仓储服务下游应用，为货物运输配送提供功能。功能有：作业单管理、计划单管理、运输单管理、可视化调度、结算管理等。</p></li><li><h6 id="AMS【预约管理系统-Appointment-Management-System】"><a href="#AMS【预约管理系统-Appointment-Management-System】" class="headerlink" title="AMS【预约管理系统 Appointment Management System】"></a>AMS【预约管理系统 Appointment Management System】</h6><p>AMS为WMS系统的上游应用，供应商通过在AMS系统中进行送货预约，预约成功之后信息推送到WMS。功能有：送货预约、预约审核、预约签到、预约叫号、预约调度、预约可视化管理、道口可视化管理、时间窗管理、供应商考核 </p></li><li><h6 id="EDI【客户数据交换系统-Electronic-Data-Interchange】"><a href="#EDI【客户数据交换系统-Electronic-Data-Interchange】" class="headerlink" title="EDI【客户数据交换系统 Electronic Data Interchange】"></a>EDI【客户数据交换系统 Electronic Data Interchange】</h6><p>  EDI是对接客户系统的入口，订单先经EDI处理，再流入OMS。功能有：接口鉴权、收货接口、发货接口、收货反馈接口、发货反馈接口、库存同步接口、库存异动接口、参数转换等</p></li></ul><h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><p><img src="729be84fe2e8d3295a888b322481bc1.jpg" alt="Saas平台架构图"><br><img src="1664256661450.jpg" alt="产品功能架构图"><br><img src="0efeb916b148d18eee7fd345993cc57.jpg" alt="EDI平台架构图"></p><h1 id="系统展示"><a href="#系统展示" class="headerlink" title="系统展示"></a>系统展示</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="1664242603533.jpg" alt="图1"></p><h2 id="portal页"><a href="#portal页" class="headerlink" title="portal页"></a>portal页</h2><p><img src="1664242642377.jpg" alt="图1"></p><h2 id="UMC"><a href="#UMC" class="headerlink" title="UMC"></a>UMC</h2><p><img src="1664242724492.jpg" alt="图1"></p><h2 id="MDM"><a href="#MDM" class="headerlink" title="MDM"></a>MDM</h2><p><img src="1664242764166.jpg" alt="图1"></p><h2 id="OMS"><a href="#OMS" class="headerlink" title="OMS"></a>OMS</h2><p><img src="1664242813805.jpg" alt="图1"><br><img src="1664242875907.jpg" alt="图2"></p><h2 id="WMS"><a href="#WMS" class="headerlink" title="WMS"></a>WMS</h2><p><img src="1664242949650.jpg" alt="图1"><br><img src="1664243009337.jpg" alt="图2"></p><h2 id="TMS"><a href="#TMS" class="headerlink" title="TMS"></a>TMS</h2><p><img src="1664243179923.jpg" alt="图1"><br><img src="1664243231621.jpg" alt="图2"></p><h2 id="EDI"><a href="#EDI" class="headerlink" title="EDI"></a>EDI</h2><p><img src="1664243330417.jpg" alt="图1"></p><h1 id="原型设计"><a href="#原型设计" class="headerlink" title="原型设计"></a>原型设计</h1><p><img src="1664244070693.jpg" alt="输入图片说明"><br><img src="1664244094573.jpg" alt="输入图片说明"><br><img src="1664244123966.jpg" alt="输入图片说明"><br><img src="1664244178035.jpg" alt="输入图片说明"><br><img src="1664244286481.jpg" alt="输入图片说明"><br><img src="1664244307046.jpg" alt="输入图片说明"><br><img src="1664244345134.jpg" alt="输入图片说明"><br><img src="1664244506026.jpg" alt="输入图片说明"><br><img src="1664244533795.jpg" alt="输入图片说明"><br><img src="1664244654305.jpg" alt="输入图片说明"><br><img src="1664244736682.jpg" alt="输入图片说明"><br><img src="1664244841078.jpg" alt="输入图片说明"><br><img src="1664244899895.jpg" alt="输入图片说明"></p><h4 id="思路展示"><a href="#思路展示" class="headerlink" title="思路展示"></a>思路展示</h4><p><img src="1664245044485.jpg" alt="输入图片说明"><br><img src="1664245062702.jpg" alt="输入图片说明"><br><img src="1664245104050.jpg" alt="输入图片说明"><br><img src="1664245273065.png" alt="输入图片说明"><br><img src="1664245471951.jpg" alt="输入图片说明"><br><img src="1664245548787.jpg" alt="输入图片说明"><br><img src="1664245584635.jpg" alt="输入图片说明"><br><img src="1664245618171.jpg" alt="输入图片说明"><br><img src="1664245653299.jpg" alt="输入图片说明"><br><img src="1664245701210.jpg" alt="输入图片说明"></p>]]></content>
    
    
    <categories>
      
      <category>产品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作成果</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
